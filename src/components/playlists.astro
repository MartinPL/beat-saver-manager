---
import PlaylistsItem from "../components/playlists-item.astro"
---

<section x-data="playlists">
    <div class="space-y-6">
        <div class="flex items-center justify-between">
            <h2 class="text-xl font-semibold text-slate-200">Playlists</h2>
            <div>
                <form @click.prevent="search()">
                    <select x-model="sortOrder" class="text-black">
                        <option>Latest</option>
                        <option>Curated</option>
                    </select>
                </form>
            </div>
        </div>
        <nav class="grid grid-cols-1 gap-4 lg:grid-cols-4 lg:gap-8">
            <template x-for="playlist in playlists">
                <PlaylistsItem />
            </template>
        </nav>
    </div>
    <!-- TODO: Hide where there is no more playlist -->
    <button
        @click="loadMore()"
        class="group mt-10 flex items-center space-x-1 mx-auto text-sm text-slate-400 transition hover:text-white active:text-slate-400"
    >
        <span>Load more</span>
        <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            class="h-5 w-5 opacity-50 transition ease-out group-hover:opacity-100 group-active:translate-x-2"
        >
            <path
                fill-rule="evenodd"
                d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z"
                clip-rule="evenodd"></path>
        </svg>
    </button>
</section>

<script>
    import Alpine from "alpinejs"
    Alpine.data("playlists", () => ({
        playlists: [],
        page: 0,
        sortOrder: "Latest",
        query: "",
        init() {
            this.query = new URLSearchParams(window.location.search).get("q") ?? '';
            this.search()
        },
        async get() {
            const params = new URLSearchParams({
                includeEmpty: false,
                q: this.query,
                sortOrder: this.sortOrder,
            })
            let response = await fetch(`https://api.beatsaver.com/playlists/search/${this.page}?${params.toString()}`)
            response = await response.json()
            return response.docs
        },
        async loadMore() {
            this.page++
            this.playlists.push(...(await this.get()))
        },
        async search() {
            this.playlists = await this.get()
        },
    }))
</script>
